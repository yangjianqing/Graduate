<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.graduate.system.mapper.BCheckMapper">
    
    <resultMap type="BCheck" id="BCheckResult">
        <result property="ckId"    column="ck_id"    />
        <result property="ckName"    column="ck_name"    />
        <result property="ckTime"    column="ck_time"    />
        <result property="ckAddress"    column="ck_address"    />
        <result property="ckLongitude"    column="ck_longitude"    />
        <result property="ckLatitude"    column="ck_latitude"    />
        <result property="bClass"    column="b_class"    />
        <result property="ckTpye"    column="ck_tpye"    />
        <result property="cId"    column="c_id"    />
    </resultMap>

    <sql id="selectBCheckVo">
        select ck_id, ck_name, ck_time, ck_address, ck_longitude, ck_latitude, b_class, ck_tpye ,c_id from b_check
    </sql>

    <select id="selectBCheckList" parameterType="BCheck" resultMap="BCheckResult">
        <include refid="selectBCheckVo"/>
        <where>  
            <if test="ckName != null  and ckName != ''"> and ck_name like concat('%', #{ckName}, '%')</if>
            <if test="ckTime != null "> and ck_time = #{ckTime}</if>
            <if test="ckAddress != null  and ckAddress != ''"> and ck_address like concat('%', #{ckAddress}, '%')</if>
            <if test="bClass != null "> and b_class = #{bClass}</if>
            <if test="ckTpye != null  and ckTpye != ''"> and ck_tpye = #{ckTpye}</if>
            <if test="stuId != null  and stuId != ''"> and stu_id = #{stuId}</if>
        </where>
        ORDER BY ck_time DESC
    </select>

    
    <select id="selectBCheckByCkId" parameterType="Long" resultMap="BCheckResult">
        <include refid="selectBCheckVo"/>
        where ck_id = #{ckId}
    </select>
<!--    统计公司类型-->
    <select id="CountCkTpye" parameterType="BCheck" resultType="map">
        SELECT c.c_type as name,COUNT(*) AS count, CAST(ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*)
	    FROM b_student
	    WHERE compeny_id IS NOT NULL), 2) AS decimal(10)) AS percentage
        FROM b_student s JOIN b_company c ON s.compeny_id = c.c_id
        GROUP BY c.c_type
            LIMIT 4;
    </select>

    <!--    查询每个教师毕业的人数，取前五-->
    <select id="countStu" parameterType="BStudent" resultType="map">
        SELECT t.tchr_name, COUNT(*) AS student_count
        FROM b_student s
        JOIN b_teacher t ON s.teacher_id = t.tchr_id
        GROUP BY s.teacher_id
        ORDER BY student_count DESC
        LIMIT 5;
    </select>
<!--    //查询学生签到人数-->
    <select id="countCheck" parameterType="BCheck" resultType="long">
        SELECT COUNT(*) as count
        FROM b_check
        WHERE stu_id= #{stuId}
          AND DATE(ck_time) = CURDATE()
    </select>

        
    <insert id="insertBCheck" parameterType="BCheck" useGeneratedKeys="true" keyProperty="ckId">
        insert into b_check
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="stuId != null">stu_id,</if>
            <if test="ckName != null">ck_name,</if>
            <if test="ckTime != null">ck_time,</if>
            <if test="ckAddress != null">ck_address,</if>
            <if test="ckLongitude != null">ck_longitude,</if>
            <if test="ckLatitude != null">ck_latitude,</if>
            <if test="bClass != null">b_class,</if>
            <if test="ckTpye != null">ck_tpye,</if>
            <if test="cId !=null">c_id</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="stuId != null">#{stuId},</if>
            <if test="ckName != null">#{ckName},</if>
            <if test="ckTime != null">#{ckTime},</if>
            <if test="ckAddress != null">#{ckAddress},</if>
            <if test="ckLongitude != null">#{ckLongitude},</if>
            <if test="ckLatitude != null">#{ckLatitude},</if>
            <if test="bClass != null">#{bClass},</if>
            <if test="ckTpye != null">#{ckTpye},</if>
            <if test="cId != null">#{cId},</if>
         </trim>
    </insert>




    <update id="updateBCheck" parameterType="BCheck">
        update b_check
        <trim prefix="SET" suffixOverrides=",">
            <if test="ckName != null">ck_name = #{ckName},</if>
            <if test="ckTime != null">ck_time = #{ckTime},</if>
            <if test="ckAddress != null">ck_address = #{ckAddress},</if>
            <if test="ckLongitude != null">ck_longitude = #{ckLongitude},</if>
            <if test="ckLatitude != null">ck_latitude = #{ckLatitude},</if>
            <if test="bClass != null">b_class = #{bClass},</if>
            <if test="ckTpye != null">ck_tpye = #{ckTpye},</if>
        </trim>
        where ck_id = #{ckId}
    </update>

    <delete id="deleteBCheckByCkId" parameterType="Long">
        delete from b_check where ck_id = #{ckId}
    </delete>

    <delete id="deleteBCheckByCkIds" parameterType="String">
        delete from b_check where ck_id in 
        <foreach item="ckId" collection="array" open="(" separator="," close=")">
            #{ckId}
        </foreach>
    </delete>

    <select id="selectCheckInCounts"   parameterType="bCheck" resultType="map">
        SELECT DATE(ck_time) AS date, COUNT(*) AS count
        FROM b_check
        GROUP BY DATE(ck_time)
        ORDER BY DATE(ck_time)
    </select>


</mapper>